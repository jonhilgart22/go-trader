name: lint and test

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      ## setup go
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.0
      - name: Install dependencies
        run: |
          go version
      - name: Run build
        run: go build app/src/main.go
      - name: Run vet & lint
        run: |
          go vet ./...
          go fmt ./...
      - name: Run testing aws utils
        run: cd app/awsUtils && go test -v
      - name: Run testing ftx
        run: cd app/ftx && go test -v
      - name: Run testing src
        run: cd app/src && go test -v
      ## setup python
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      # #----------------------------------------------
      - name: Setup Code Climate test-reporter
        run: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - name: Run tests
        run: |
          source .venv/bin/activate
          ./cc-test-reporter before-build
          poetry run python -m pytest
      - name: Coverage
        run: |
          poetry run coverage run -m pytest && poetry run coverage xml
      - name: Upload Coverage
        run: |
          export CC_TEST_REPORTER_ID=0db0e2cce20c934be6a79128cf743b8b0bd036ef50b4778d5eeda7f1598cd194
          ./cc-test-reporter format-coverage -t coverage.py
          ./cc-test-reporter upload-coverage
      - name: lint
        run: poetry run black . --check
      - name: flake8
        run: poetry run flake8 .
      - name: mypy
        run: poetry run mypy  . --check
